using System;
using System.Runtime.InteropServices;
using QHackCLR.Dac.COM;
using QHackCLR.Dac.Utils;
namespace QHackCLR.Dac.Interfaces
{
	[ComImport, Guid("436f00f2-b42a-4b9f-870c-e73db66ae930")]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	public unsafe interface ISOSDacInterface
	{
		HRESULT GetThreadStoreData(DacpThreadStoreData* data);
		HRESULT GetAppDomainStoreData(out DacpAppDomainStoreData data);
		HRESULT GetAppDomainList(uint count, CLRDATA_ADDRESS* values, out uint pNeeded);
		HRESULT GetAppDomainData(CLRDATA_ADDRESS addr, out DacpAppDomainData data);
		HRESULT GetAppDomainName(CLRDATA_ADDRESS addr, uint count, char* name, out uint pNeeded);
		HRESULT GetDomainFromContext(CLRDATA_ADDRESS context, CLRDATA_ADDRESS* domain);
		HRESULT GetAssemblyList(CLRDATA_ADDRESS appDomain, uint count, CLRDATA_ADDRESS* values, out uint pNeeded);
		HRESULT GetAssemblyData(CLRDATA_ADDRESS baseDomainPtr, CLRDATA_ADDRESS assembly, out DacpAssemblyData data);
		HRESULT GetAssemblyName(CLRDATA_ADDRESS assembly, uint count, char* name, out uint pNeeded);
		HRESULT GetModule(CLRDATA_ADDRESS addr, out IXCLRDataModule mod);
		HRESULT GetModuleData(CLRDATA_ADDRESS moduleAddr, out DacpModuleData data);
		HRESULT TraverseModuleMap(ModuleMapType mmt, CLRDATA_ADDRESS moduleAddr, [MarshalAs(UnmanagedType.FunctionPtr)] MODULEMAPTRAVERSE pCallback, void* token);
		HRESULT GetAssemblyModuleList(CLRDATA_ADDRESS assembly, uint count, CLRDATA_ADDRESS* modules, out uint pNeeded);
		HRESULT GetILForModule(CLRDATA_ADDRESS moduleAddr, uint rva, CLRDATA_ADDRESS* il);
		HRESULT GetThreadData(CLRDATA_ADDRESS thread, DacpThreadData* data);
		HRESULT GetThreadFromThinlockID(uint thinLockId, CLRDATA_ADDRESS* pThread);
		HRESULT GetStackLimits(CLRDATA_ADDRESS threadPtr, CLRDATA_ADDRESS* lower, CLRDATA_ADDRESS* upper, CLRDATA_ADDRESS* fp);
		HRESULT GetMethodDescData(CLRDATA_ADDRESS methodDesc, CLRDATA_ADDRESS ip, out DacpMethodDescData data, uint cRevertedRejitVersions, DacpReJitData* rgRevertedRejitData, out uint pcNeededRevertedRejitData);
		HRESULT GetMethodDescPtrFromIP(CLRDATA_ADDRESS ip, CLRDATA_ADDRESS* ppMD);
		HRESULT GetMethodDescName(CLRDATA_ADDRESS methodDesc, uint count, char* name, out uint pNeeded);
		HRESULT GetMethodDescPtrFromFrame(CLRDATA_ADDRESS frameAddr, CLRDATA_ADDRESS* ppMD);
		HRESULT GetMethodDescFromToken(CLRDATA_ADDRESS moduleAddr, int token, CLRDATA_ADDRESS* methodDesc);
		HRESULT GetMethodDescTransparencyData(CLRDATA_ADDRESS methodDesc, DacpMethodDescTransparencyData* data);
		HRESULT GetCodeHeaderData(CLRDATA_ADDRESS ip, out DacpCodeHeaderData data);
		HRESULT GetJitManagerList(uint count, DacpJitManagerInfo* managers, out uint pNeeded);
		HRESULT GetJitHelperFunctionName(CLRDATA_ADDRESS ip, uint count, char* name, out uint pNeeded);
		HRESULT GetJumpThunkTarget(int* ctx, CLRDATA_ADDRESS* targetIP, CLRDATA_ADDRESS* targetMD);
		HRESULT GetThreadpoolData(DacpThreadpoolData* data);
		HRESULT GetWorkRequestData(CLRDATA_ADDRESS addrWorkRequest, DacpWorkRequestData* data);
		HRESULT GetHillClimbingLogEntry(CLRDATA_ADDRESS addr, DacpHillClimbingLogEntry* data);
		HRESULT GetObjectData(CLRDATA_ADDRESS objAddr, out DacpObjectData data);
		HRESULT GetObjectStringData(CLRDATA_ADDRESS obj, uint count, char* stringData, out uint pNeeded);
		HRESULT GetObjectClassName(CLRDATA_ADDRESS obj, uint count, char* className, out uint pNeeded);
		HRESULT GetMethodTableName(CLRDATA_ADDRESS mt, uint count, char* mtName, out uint pNeeded);
		HRESULT GetMethodTableData(CLRDATA_ADDRESS mt, out DacpMethodTableData data);
		HRESULT GetMethodTableSlot(CLRDATA_ADDRESS mt, uint slot, out CLRDATA_ADDRESS value);
		HRESULT GetMethodTableFieldData(CLRDATA_ADDRESS mt, out DacpMethodTableFieldData data);
		HRESULT GetMethodTableTransparencyData(CLRDATA_ADDRESS mt, DacpMethodTableTransparencyData* data);
		HRESULT GetMethodTableForEEClass(CLRDATA_ADDRESS eeClass, CLRDATA_ADDRESS* value);
		HRESULT GetFieldDescData(CLRDATA_ADDRESS fieldDesc, out DacpFieldDescData data);
		HRESULT GetFrameName(CLRDATA_ADDRESS vtable, uint count, char* frameName, out uint pNeeded);
		HRESULT GetPEFileBase(CLRDATA_ADDRESS addr, CLRDATA_ADDRESS* _base);
		HRESULT GetPEFileName(CLRDATA_ADDRESS addr, uint count, char* fileName, out uint pNeeded);
		HRESULT GetGCHeapData(DacpGcHeapData* data);
		HRESULT GetGCHeapList(uint count, CLRDATA_ADDRESS* heaps, out uint pNeeded);
		HRESULT GetGCHeapDetails(CLRDATA_ADDRESS heap, DacpGcHeapDetails* details);
		HRESULT GetGCHeapStaticData(DacpGcHeapDetails* data);
		HRESULT GetHeapSegmentData(CLRDATA_ADDRESS seg, DacpHeapSegmentData* data);
		HRESULT GetOOMData(CLRDATA_ADDRESS oomAddr, DacpOomData* data);
		HRESULT GetOOMStaticData(DacpOomData* data);
		HRESULT GetHeapAnalyzeData(CLRDATA_ADDRESS addr, DacpGcHeapAnalyzeData* data);
		HRESULT GetHeapAnalyzeStaticData(DacpGcHeapAnalyzeData* data);
		HRESULT GetDomainLocalModuleData(CLRDATA_ADDRESS addr, DacpDomainLocalModuleData* data);
		HRESULT GetDomainLocalModuleDataFromAppDomain(CLRDATA_ADDRESS appDomainAddr, int moduleID, out DacpDomainLocalModuleData data);
		HRESULT GetDomainLocalModuleDataFromModule(CLRDATA_ADDRESS moduleAddr, out DacpDomainLocalModuleData data);
		HRESULT GetThreadLocalModuleData(CLRDATA_ADDRESS thread, uint index, DacpThreadLocalModuleData* data);
		HRESULT GetSyncBlockData(uint number, DacpSyncBlockData* data);
		HRESULT GetSyncBlockCleanupData(CLRDATA_ADDRESS addr, DacpSyncBlockCleanupData* data);
		HRESULT GetHandleEnum(out ISOSHandleEnum ppHandleEnum);
		HRESULT GetHandleEnumForTypes(uint* types, uint count, out ISOSHandleEnum ppHandleEnum);
		HRESULT GetHandleEnumForGC(uint gen, out ISOSHandleEnum ppHandleEnum);
		HRESULT TraverseEHInfo(CLRDATA_ADDRESS ip, DUMPEHINFO pCallback, void* token);
		HRESULT GetNestedExceptionData(CLRDATA_ADDRESS exception, CLRDATA_ADDRESS* exceptionObject, CLRDATA_ADDRESS* nextNestedException);
		HRESULT GetStressLogAddress(CLRDATA_ADDRESS* stressLog);
		HRESULT TraverseLoaderHeap(CLRDATA_ADDRESS loaderHeapAddr, VISITHEAP pCallback);
		HRESULT GetCodeHeapList(CLRDATA_ADDRESS jitManager, uint count, DacpJitCodeHeapInfo* codeHeaps, out uint pNeeded);
		HRESULT TraverseVirtCallStubHeap(CLRDATA_ADDRESS pAppDomain, VCSHeapType heaptype, VISITHEAP pCallback);
		HRESULT GetUsefulGlobals(out DacpUsefulGlobalsData data);
		HRESULT GetClrWatsonBuckets(CLRDATA_ADDRESS thread, void* pGenericModeBlock);
		HRESULT GetTLSIndex(uint* pIndex);
		HRESULT GetDacModuleHandle(nuint* phModule);
		HRESULT GetRCWData(CLRDATA_ADDRESS addr, DacpRCWData* data);
		HRESULT GetRCWInterfaces(CLRDATA_ADDRESS rcw, uint count, DacpCOMInterfacePointerData* interfaces, out uint pNeeded);
		HRESULT GetCCWData(CLRDATA_ADDRESS ccw, DacpCCWData* data);
		HRESULT GetCCWInterfaces(CLRDATA_ADDRESS ccw, uint count, DacpCOMInterfacePointerData* interfaces, out uint pNeeded);
		HRESULT TraverseRCWCleanupList(CLRDATA_ADDRESS cleanupListPtr, VISITRCWFORCLEANUP pCallback, void* token);
		HRESULT GetStackReferences([In] uint osThreadID, [Out] out ISOSStackRefEnum ppEnum);
		HRESULT GetRegisterName([In] int regName, [In] uint count, [Out] char* buffer, [Out] out uint pNeeded);
		HRESULT GetThreadAllocData(CLRDATA_ADDRESS thread, DacpAllocData* data);
		HRESULT GetHeapAllocData(uint count, DacpGenerationAllocData* data, out uint pNeeded);
		HRESULT GetFailedAssemblyList(CLRDATA_ADDRESS appDomain, int count, CLRDATA_ADDRESS* values, out uint pNeeded);
		HRESULT GetPrivateBinPaths(CLRDATA_ADDRESS appDomain, int count, char* paths, out uint pNeeded);
		HRESULT GetAssemblyLocation(CLRDATA_ADDRESS assembly, int count, char* location, out uint pNeeded);
		HRESULT GetAppDomainConfigFile(CLRDATA_ADDRESS appDomain, int count, char* configFile, out uint pNeeded);
		HRESULT GetApplicationBase(CLRDATA_ADDRESS appDomain, int count, char* _base, out uint pNeeded);
		HRESULT GetFailedAssemblyData(CLRDATA_ADDRESS assembly, uint* pContext, HRESULT* pResult);
		HRESULT GetFailedAssemblyLocation(CLRDATA_ADDRESS assesmbly, uint count, char* location, out uint pNeeded);
		HRESULT GetFailedAssemblyDisplayName(CLRDATA_ADDRESS assembly, uint count, char* name, out uint pNeeded);
	}
}
